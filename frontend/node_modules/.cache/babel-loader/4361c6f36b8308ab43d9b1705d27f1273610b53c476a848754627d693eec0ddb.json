{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport { createStore } from \"vuex\";\nimport Swal from \"sweetalert2\";\nimport axios from \"axios\";\n// import Cookies from \"js-cookie\";\n\nconst dbConnection = 'https://lisambuwa.onrender.com/';\nexport default createStore({\n  state: {\n    products: null,\n    product: null,\n    // users: null,\n    // user: null,\n    users: null,\n    token: null,\n    isLoggedIn: false,\n    cart: []\n  },\n  getters: {},\n  mutations: {\n    setProducts: (state, products) => {\n      state.products = products;\n    },\n    setProduct: (state, product) => {\n      state.product = product;\n    },\n    setUsers: (state, users) => {\n      state.users = users;\n    },\n    setUser: (state, user) => {\n      state.user = user;\n    },\n    sortProducts: state => {\n      state.products.sort((a, b) => {\n        return a.Price - b.Price;\n      });\n      if (!state.asc) {\n        state.products.reverse();\n      }\n      state.asc = !state.asc;\n    },\n    //CART\n    setCart(state, cart) {\n      state.cart = cart;\n    },\n    // addToCart(state, product) {\n    //   state.cart.push(product);\n    // },\n    addToCart(state, product) {\n      const existingProduct = state.cart.find(item => item.prodID === product.prodID);\n      if (existingProduct) {\n        existingProduct.quantity += 1;\n      } else {\n        product.quantity = 1;\n        state.cart.push(product);\n      }\n    },\n    updateCartItemQuantity(state, {\n      prodID,\n      prodQUANTITY\n    }) {\n      const cartItem = state.cart.find(item => item.prodID === prodID);\n      if (cartItem) {\n        cartItem.quantity = prodQUANTITY;\n      }\n    },\n    removeItem(state, cartID) {\n      const index = state.cart.findIndex(item => item.cartID === cartID);\n      if (index !== -1) {\n        state.cart.splice(index, 1);\n      }\n    },\n    setUserFromLocalStorage(state) {\n      const token = localStorage.getItem(\"userToken\");\n      if (token) {\n        state.token = token;\n        state.isLoggedIn = true;\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\n        if (userData) {\n          state.user = userData;\n        }\n      }\n    },\n    setUser(state, user) {\n      state.user = user;\n      state.isLoggedIn = true;\n    },\n    setToken(state, token) {\n      state.token = token;\n    },\n    clearUser(state) {\n      state.user = null;\n      state.token = null;\n      state.isLoggedIn = false;\n    }\n  },\n  actions: {\n    getProducts: async context => {\n      fetch(\"https://lisambuwa.onrender.com/products\").then(res => res.json()).then(products => context.commit(\"setProducts\", products));\n    },\n    // getProduct: async (context, id) => {\n    //   fetch(\"https://nodeeomp.onrender.com/products/\" + id)\n    //     .then((res) => res.json())\n    //     .then((product) => context.commit(\"setProduct\", product));\n    // },\n    getProduct: async (context, id) => {\n      try {\n        const response = await fetch(`https://lisambuwa.onrender.com/products/${id}`);\n        if (!response.ok) {\n          throw new Error(\"Failed to fetch product\");\n        }\n        const product = await response.json();\n        context.commit(\"setProduct\", product);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    getUsers: async context => {\n      fetch(\"https://lisambuwa.onrender.com/users\").then(res => res.json()).then(users => context.commit(\"setUsers\", users.results));\n    },\n    getUser: async (context, id) => {\n      try {\n        const res = await fetch(`https://lisambuwa.onrender.com/users/${id}`);\n        if (!res.ok) {\n          throw new Error(\"Failed to fetch user by ID\");\n        }\n        const user = await res.json();\n        context.commit(\"setUser\", user);\n      } catch (error) {\n        console.error(error);\n      }\n    },\n    //User\n    //register\n    async registerUser({\n      commit\n    }, userData) {\n      try {\n        const response = await axios.post(\"https://lisambuwa.onrender.com/register\", userData);\n        const user = response.data;\n        commit(\"setUser\", user);\n        if (response.status === 200) {\n          Swal.fire({\n            icon: \"success\",\n            title: \"Registration Successful\",\n            text: \"You have successfully registered.\"\n          });\n          this.$router.push(\"/login\");\n        } else {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Registration Failed\",\n            text: \"An error occurred during registration.\"\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: error.message\n        });\n      }\n    },\n    //Login\n    async loginUser({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post(\"https://lisambuwa.onrender.com/login\", credentials);\n        if (response.status === 200) {\n          const {\n            token,\n            user\n          } = response.data;\n          console.log(response.data);\n          console.log(token);\n          commit(\"setToken\", token);\n          commit(\"setUser\", user);\n          // Store user data in local storage\n          localStorage.setItem(\"userToken\", token);\n          localStorage.setItem(\"userData\", JSON.stringify(response.data));\n          window.location.reload();\n          Swal.fire({\n            icon: \"success\",\n            title: \"Login Successful\",\n            text: \"You have successfully logged in.\"\n          });\n        } else {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Error\",\n            text: \"An error occurred during login.\"\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: error.message\n        });\n      }\n    },\n    async getCart({\n      commit\n    }) {\n      try {\n        const response = await axios.get(`${baseUrl}cart`);\n        commit(\"setCart\", response.data);\n      } catch (error) {\n        console.error(\"Error fetching cart:\", error);\n      }\n    },\n    async addToCart({\n      commit,\n      state\n    }, product) {\n      try {\n        if (!state.cart) {\n          console.error(\"Cart is not initialized.\");\n          return false;\n        }\n        const response = await axios.post(`${baseUrl}cart`, product);\n        console.log(product);\n        if (response.status === 200) {\n          commit(\"addToCart\", response.data);\n          console.log(\"addToCart\", response.data);\n          await this.dispatch(\"getCart\");\n          Swal.fire({\n            icon: \"success\",\n            title: \"Added to Cart\",\n            text: \"The product has been added to your cart.\"\n          });\n          return true;\n        } else {\n          console.error(\"Error adding to cart:\", response.statusText);\n          Swal.fire({\n            icon: \"error\",\n            title: \"Error\",\n            text: \"An error occurred while adding the product to your cart.\"\n          });\n          return false;\n        }\n      } catch (error) {\n        console.error(\"Error adding to cart:\", error);\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: \"An error occurred while adding the product to your cart.\"\n        });\n        throw error;\n      }\n    },\n    async removeItem({\n      commit\n    }, cartID) {\n      try {\n        await axios.delete(`${baseUrl}cart/${cartID}`);\n        commit(\"removeItem\", cartID);\n        console.log(cartID);\n        Swal.fire({\n          icon: \"success\",\n          title: \"Item Removed\",\n          text: \"The item has been successfully removed from the cart.\"\n        });\n      } catch (error) {\n        console.error(\"Error removing from cart:\", error);\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: \"An error occurred while removing the item from the cart.\"\n        });\n      }\n    },\n    // removeItem(state, crt) {\n    //   const existingProduct = state.cart.find(\n    //     (crt) => crt.prodID === crt.prodID\n    //   );\n    //   if (existingProduct) {\n    //     existingProduct.quantity += 1;\n    //   } else {\n    //     state.cart.push({ ...product, quantity: 1 });\n    //   }\n    // },\n    async updateCartItemQuantity({\n      commit,\n      state\n    }, {\n      cartID,\n      prodID,\n      quantity\n    }) {\n      try {\n        const response = await axios.patch(`${baseUrl}cart/${prodID}`, {\n          quantity\n        });\n        if (response.status === 200) {\n          // commit(\"updateCartItemQuantity\", { prodID, quantity });\n          const cartItem = state.cart.find(item => item.cartID === cartID && item.prodID === prodID);\n          if (cartItem) {\n            cartItem.quantity = quantity;\n            commit(\"setCart\", [...state.cart]);\n          }\n          console.log(cartID);\n        } else {\n          console.error(\"Error updating cart item quantity:\", response.statusText);\n        }\n      } catch (error) {\n        console.error(\"Error updating cart item quantity:\", error);\n        throw error;\n      }\n    },\n    //User\n    //register\n    async registerUser({\n      commit\n    }, userData) {\n      try {\n        const response = await axios.post(`${dbConnection}register`, userData);\n        const user = response.data;\n        commit(\"setUser\", user);\n        if (response.status === 200) {\n          Swal.fire({\n            icon: \"success\",\n            title: \"Successful Registration \",\n            text: \"You have registered successfully .\"\n          });\n        } else {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Registration Failed\",\n            text: \"An error occurred during registration.\"\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: error.message\n        });\n      }\n    },\n    //Login\n    async loginUser({\n      commit\n    }, credentials) {\n      try {\n        const response = await axios.post(`${dbConnection}login`, credentials);\n        if (response.status === 200) {\n          const {\n            token,\n            user\n          } = response.data;\n          console.log(response.data);\n          console.log(token);\n          commit(\"setToken\", token);\n          commit(\"setUser\", user);\n          // Store user data in local storage\n          localStorage.setItem(\"userToken\", token);\n          localStorage.setItem(\"userData\", JSON.stringify(response.data));\n          window.location.reload();\n          Swal.fire({\n            icon: \"success\",\n            title: \"Login Successful\",\n            text: \"You have logged in successfully .\"\n          });\n        } else {\n          Swal.fire({\n            icon: \"error\",\n            title: \"Error\",\n            text: \"An error occurred during login.\"\n          });\n        }\n      } catch (error) {\n        Swal.fire({\n          icon: \"error\",\n          title: \"Error\",\n          text: error.message\n        });\n      }\n    },\n    logout({\n      commit\n    }) {\n      localStorage.removeItem(\"userToken\");\n      localStorage.removeItem(\"userData\");\n      commit(\"clearUser\");\n      window.location.reload();\n    }\n  },\n  modules: {}\n});\n//login and register\n// async register(context, payload) {\n//   console.log(\"Reached\");\n//   try {\n//     const res = await axios.post(`https://capstone-sb96.onrender.com/users`, payload);\n//     console.log(\"Res: \", res.data.status);\n//     const { message, err, token } = res.data;\n//     if (message === \"An error occured\") {\n//       context.commit(\"setError\", message);\n//       context.commit(\"setRegStatus\", \"Not registered\");\n//       return { success: false, error: message };\n//     } else if (token) { ``\n//       context.commit(\"setToken\", token);\n//       context.commit(\"setRegStatus\", \"Registered successfully\");\n//       return { success: true, token };\n//     } else if (err) {\n//       console.error(err);\n//     }\n//   } catch (e) {\n//     context.commit(\"setError\", e);\n//     console.log(e);\n//     context.commit(\"setRegStatus\", \"Not registered\");\n//     throw e;\n//   }\n// }\n\n// async login(context, payload) {\n//   try {\n//     const res = await axios.post(`https://capstone-sb96.onrender.com/user/login`, payload);\n//     console.log(\"Res: \", res.data.status);\n//     const { err, message, token, result } = res.data;\n//     console.log(result);\n//     if (message === \"Unregistered user or incorrect password!\") {\n//       context.commit(\"setError\", message);\n//       context.commit(\"setLogStatus\", \"Not logged in\");\n//       return { success: false, error: message };\n//     }\n//     if (message && token && result) {\n//       context.commit(\"setUser\", result);\n//       context.commit(\"setToken\", token);\n//       context.commit(\"setUserData\", result);\n//       context.commit(\"setLogStatus\", \"Logged in!\");\n//       Cookies.set(\"userToken\", token, {\n//         expires: 1,\n//       });\n//       return { success: true, token, result };\n//     } else if (err) {\n//       context.commit(\"setError\", err);\n//       return { success: false, error: err };\n//     } else {\n//       context.commit(\"setError\", \"Unknown error during login\");\n//       context.commit(\"setLogStatus\", \"not logged in\");\n//       return { success: false, error: \"Unknown error\" };\n//     }\n//   } catch (err) {\n//     console.log(\"Error\")\n//   }\n// }\n// cookieCheck(context) {\n//   const token = Cookies.get(\"userToken\");\n//   if (token) {\n//     context.commit(\"setToken\", token);\n//   }\n// }\n// init(context) {\n//   context.dispatch(\"cookieCheck\");\n// }\n// async logout(context) {\n//   context.commit(\"setToken\", null);\n//   context.commit(\"setUser\", null);\n//   context.commit(\"setUserData\", null);\n//   Cookies.remove(\"userToken\");\n// },","map":{"version":3,"names":["createStore","Swal","axios","dbConnection","state","products","product","users","token","isLoggedIn","cart","getters","mutations","setProducts","setProduct","setUsers","setUser","user","sortProducts","sort","a","b","Price","asc","reverse","setCart","addToCart","existingProduct","find","item","prodID","quantity","push","updateCartItemQuantity","prodQUANTITY","cartItem","removeItem","cartID","index","findIndex","splice","setUserFromLocalStorage","localStorage","getItem","userData","JSON","parse","setToken","clearUser","actions","getProducts","context","fetch","then","res","json","commit","getProduct","id","response","ok","Error","error","console","getUsers","results","getUser","registerUser","post","data","status","fire","icon","title","text","$router","message","loginUser","credentials","log","setItem","stringify","window","location","reload","getCart","get","baseUrl","dispatch","statusText","delete","patch","logout","modules"],"sources":["C:/Users/Student/CapstoneB/capstonefinal/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from \"vuex\";\r\nimport Swal from \"sweetalert2\";\r\nimport axios from \"axios\";\r\n// import Cookies from \"js-cookie\";\r\n\r\nconst dbConnection = 'https://lisambuwa.onrender.com/';\r\n\r\nexport default createStore({\r\n  state: {\r\n    products: null,\r\n    product: null,\r\n    // users: null,\r\n    // user: null,\r\n    users: null,\r\n    token: null,\r\n    isLoggedIn: false,\r\n    cart: [],\r\n  },\r\n  getters: {},\r\n  mutations: {\r\n    setProducts: (state, products) => {\r\n      state.products = products;\r\n    },\r\n    setProduct: (state, product) => {\r\n      state.product = product;\r\n    },\r\n    setUsers: (state, users) => {\r\n      state.users = users;\r\n    },\r\n    setUser: (state, user) => {\r\n      state.user = user;\r\n    },\r\n\r\n    sortProducts: (state) => {\r\n      state.products.sort((a, b) => {\r\n        return a.Price - b.Price;\r\n      });\r\n      if (!state.asc) {\r\n        state.products.reverse();\r\n      }\r\n      state.asc = !state.asc;\r\n    },\r\n    //CART\r\n    setCart(state, cart) {\r\n      state.cart = cart;\r\n    },\r\n    // addToCart(state, product) {\r\n    //   state.cart.push(product);\r\n    // },\r\n    addToCart(state, product) {\r\n      const existingProduct = state.cart.find(\r\n        (item) => item.prodID === product.prodID\r\n      );\r\n      if (existingProduct) {\r\n        existingProduct.quantity += 1;\r\n      } else {\r\n        product.quantity = 1;\r\n        state.cart.push(product);\r\n      }\r\n    },\r\n    updateCartItemQuantity(state, { prodID, prodQUANTITY }) {\r\n      const cartItem = state.cart.find((item) => item.prodID === prodID);\r\n      if (cartItem) {\r\n        cartItem.quantity = prodQUANTITY;\r\n      }\r\n    },\r\n    removeItem(state, cartID) {\r\n      const index = state.cart.findIndex((item) => item.cartID === cartID);\r\n      if (index !== -1) {\r\n        state.cart.splice(index, 1);\r\n      }\r\n    },\r\n    setUserFromLocalStorage(state) {\r\n      const token = localStorage.getItem(\"userToken\");\r\n      if (token) {\r\n        state.token = token;\r\n        state.isLoggedIn = true;\r\n        const userData = JSON.parse(localStorage.getItem(\"userData\"));\r\n        if (userData) {\r\n          state.user = userData;\r\n        }\r\n      }\r\n    },\r\n    setUser(state, user) {\r\n      state.user = user;\r\n      state.isLoggedIn = true;\r\n    },\r\n    setToken(state, token) {\r\n      state.token = token;\r\n    },\r\n    clearUser(state) {\r\n      state.user = null;\r\n      state.token = null;\r\n      state.isLoggedIn = false;\r\n    },\r\n  },\r\n  actions: {\r\n    getProducts: async (context) => {\r\n      fetch(\"https://lisambuwa.onrender.com/products\")\r\n        .then((res) => res.json())\r\n        .then((products) => context.commit(\"setProducts\", products));\r\n    },\r\n\r\n    // getProduct: async (context, id) => {\r\n    //   fetch(\"https://nodeeomp.onrender.com/products/\" + id)\r\n    //     .then((res) => res.json())\r\n    //     .then((product) => context.commit(\"setProduct\", product));\r\n    // },\r\n    getProduct: async (context, id) => {\r\n      try {\r\n        const response = await fetch(\r\n          `https://lisambuwa.onrender.com/products/${id}`\r\n        );\r\n        if (!response.ok) {\r\n          throw new Error(\"Failed to fetch product\");\r\n        }\r\n\r\n        const product = await response.json();\r\n\r\n        context.commit(\"setProduct\", product);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n\r\n    getUsers: async (context) => {\r\n      fetch(\"https://lisambuwa.onrender.com/users\")\r\n        .then((res) => res.json())\r\n        .then((users) => context.commit(\"setUsers\", users.results));\r\n    },\r\n    getUser: async (context, id) => {\r\n      try {\r\n        const res = await fetch(`https://lisambuwa.onrender.com/users/${id}`);\r\n        if (!res.ok) {\r\n          throw new Error(\"Failed to fetch user by ID\");\r\n        }\r\n        const user = await res.json();\r\n\r\n        context.commit(\"setUser\", user);\r\n      } catch (error) {\r\n        console.error(error);\r\n      }\r\n    },\r\n    //User\r\n    //register\r\n    async registerUser({ commit }, userData) {\r\n      try {\r\n        const response = await axios.post(\"https://lisambuwa.onrender.com/register\", userData);\r\n        const user = response.data;\r\n        commit(\"setUser\", user);\r\n        if (response.status === 200) {\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Registration Successful\",\r\n            text: \"You have successfully registered.\",\r\n          });\r\n          this.$router.push(\"/login\");\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Registration Failed\",\r\n            text: \"An error occurred during registration.\",\r\n          });\r\n        }\r\n      } catch (error) {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: error.message,\r\n        });\r\n      }\r\n    },\r\n    //Login\r\n    async loginUser({ commit }, credentials) {\r\n      try {\r\n        const response = await axios.post(\"https://lisambuwa.onrender.com/login\", credentials);\r\n        if (response.status === 200) {\r\n          const { token, user } = response.data;\r\n          console.log(response.data);\r\n          console.log(token);\r\n          commit(\"setToken\", token);\r\n          commit(\"setUser\", user);\r\n          // Store user data in local storage\r\n          localStorage.setItem(\"userToken\", token);\r\n          localStorage.setItem(\"userData\", JSON.stringify(response.data));\r\n          window.location.reload();\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Login Successful\",\r\n            text: \"You have successfully logged in.\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: \"An error occurred during login.\",\r\n          });\r\n        }\r\n      } catch (error) {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: error.message,\r\n        });\r\n      }\r\n    },\r\n    async getCart({ commit }) {\r\n      try {\r\n        const response = await axios.get(`${baseUrl}cart`);\r\n        commit(\"setCart\", response.data);\r\n      } catch (error) {\r\n        console.error(\"Error fetching cart:\", error);\r\n      }\r\n    },\r\n    async addToCart({ commit, state }, product) {\r\n      try {\r\n        if (!state.cart) {\r\n          console.error(\"Cart is not initialized.\");\r\n          return false;\r\n        }\r\n        const response = await axios.post(`${baseUrl}cart`, product);\r\n        console.log(product);\r\n        if (response.status === 200) {\r\n          commit(\"addToCart\", response.data);\r\n          console.log(\"addToCart\", response.data);\r\n          await this.dispatch(\"getCart\");\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Added to Cart\",\r\n            text: \"The product has been added to your cart.\",\r\n          });\r\n          return true;\r\n        } else {\r\n          console.error(\"Error adding to cart:\", response.statusText);\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: \"An error occurred while adding the product to your cart.\",\r\n          });\r\n          return false;\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error adding to cart:\", error);\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: \"An error occurred while adding the product to your cart.\",\r\n        });\r\n        throw error;\r\n      }\r\n    },\r\n    async removeItem({ commit }, cartID) {\r\n      try {\r\n        await axios.delete(`${baseUrl}cart/${cartID}`);\r\n        commit(\"removeItem\", cartID);\r\n        console.log(cartID);\r\n        Swal.fire({\r\n          icon: \"success\",\r\n          title: \"Item Removed\",\r\n          text: \"The item has been successfully removed from the cart.\",\r\n        });\r\n      } catch (error) {\r\n        console.error(\"Error removing from cart:\", error);\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: \"An error occurred while removing the item from the cart.\",\r\n        });\r\n      }\r\n    },\r\n    // removeItem(state, crt) {\r\n    //   const existingProduct = state.cart.find(\r\n    //     (crt) => crt.prodID === crt.prodID\r\n    //   );\r\n    //   if (existingProduct) {\r\n    //     existingProduct.quantity += 1;\r\n    //   } else {\r\n    //     state.cart.push({ ...product, quantity: 1 });\r\n    //   }\r\n    // },\r\n    async updateCartItemQuantity(\r\n      { commit, state },\r\n      { cartID, prodID, quantity }\r\n    ) {\r\n      try {\r\n        const response = await axios.patch(`${baseUrl}cart/${prodID}`, {\r\n          quantity,\r\n        });\r\n        if (response.status === 200) {\r\n          // commit(\"updateCartItemQuantity\", { prodID, quantity });\r\n          const cartItem = state.cart.find(\r\n            (item) => item.cartID === cartID && item.prodID === prodID\r\n          );\r\n          if (cartItem) {\r\n            cartItem.quantity = quantity;\r\n            commit(\"setCart\", [...state.cart]);\r\n          }\r\n          console.log(cartID);\r\n        } else {\r\n          console.error(\r\n            \"Error updating cart item quantity:\",\r\n            response.statusText\r\n          );\r\n        }\r\n      } catch (error) {\r\n        console.error(\"Error updating cart item quantity:\", error);\r\n        throw error;\r\n      }\r\n    },\r\n    //User\r\n    //register\r\n    async registerUser({ commit }, userData) {\r\n      try {\r\n        const response = await axios.post(`${dbConnection}register`, userData);\r\n        const user = response.data;\r\n        commit(\"setUser\", user);\r\n        if (response.status === 200) {\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Successful Registration \",\r\n            text: \"You have registered successfully .\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Registration Failed\",\r\n            text: \"An error occurred during registration.\",\r\n          });\r\n        }\r\n      } catch (error) {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: error.message,\r\n        });\r\n      }\r\n    },\r\n    //Login\r\n    async loginUser({ commit }, credentials) {\r\n      try {\r\n        const response = await axios.post(`${dbConnection}login`, credentials);\r\n        if (response.status === 200) {\r\n          const { token, user } = response.data;\r\n          console.log(response.data);\r\n          console.log(token);\r\n          commit(\"setToken\", token);\r\n          commit(\"setUser\", user);\r\n          // Store user data in local storage\r\n          localStorage.setItem(\"userToken\", token);\r\n          localStorage.setItem(\"userData\", JSON.stringify(response.data));\r\n          window.location.reload();\r\n          Swal.fire({\r\n            icon: \"success\",\r\n            title: \"Login Successful\",\r\n            text: \"You have logged in successfully .\",\r\n          });\r\n        } else {\r\n          Swal.fire({\r\n            icon: \"error\",\r\n            title: \"Error\",\r\n            text: \"An error occurred during login.\",\r\n          });\r\n        }\r\n      } catch (error) {\r\n        Swal.fire({\r\n          icon: \"error\",\r\n          title: \"Error\",\r\n          text: error.message,\r\n        });\r\n      }\r\n    },\r\n    logout({ commit }) {\r\n      localStorage.removeItem(\"userToken\");\r\n      localStorage.removeItem(\"userData\");\r\n      commit(\"clearUser\");\r\n      window.location.reload();\r\n    },\r\n  },\r\n\r\n  modules: {},\r\n});\r\n//login and register\r\n// async register(context, payload) {\r\n//   console.log(\"Reached\");\r\n//   try {\r\n//     const res = await axios.post(`https://capstone-sb96.onrender.com/users`, payload);\r\n//     console.log(\"Res: \", res.data.status);\r\n//     const { message, err, token } = res.data;\r\n//     if (message === \"An error occured\") {\r\n//       context.commit(\"setError\", message);\r\n//       context.commit(\"setRegStatus\", \"Not registered\");\r\n//       return { success: false, error: message };\r\n//     } else if (token) { ``\r\n//       context.commit(\"setToken\", token);\r\n//       context.commit(\"setRegStatus\", \"Registered successfully\");\r\n//       return { success: true, token };\r\n//     } else if (err) {\r\n//       console.error(err);\r\n//     }\r\n//   } catch (e) {\r\n//     context.commit(\"setError\", e);\r\n//     console.log(e);\r\n//     context.commit(\"setRegStatus\", \"Not registered\");\r\n//     throw e;\r\n//   }\r\n// }\r\n\r\n// async login(context, payload) {\r\n//   try {\r\n//     const res = await axios.post(`https://capstone-sb96.onrender.com/user/login`, payload);\r\n//     console.log(\"Res: \", res.data.status);\r\n//     const { err, message, token, result } = res.data;\r\n//     console.log(result);\r\n//     if (message === \"Unregistered user or incorrect password!\") {\r\n//       context.commit(\"setError\", message);\r\n//       context.commit(\"setLogStatus\", \"Not logged in\");\r\n//       return { success: false, error: message };\r\n//     }\r\n//     if (message && token && result) {\r\n//       context.commit(\"setUser\", result);\r\n//       context.commit(\"setToken\", token);\r\n//       context.commit(\"setUserData\", result);\r\n//       context.commit(\"setLogStatus\", \"Logged in!\");\r\n//       Cookies.set(\"userToken\", token, {\r\n//         expires: 1,\r\n//       });\r\n//       return { success: true, token, result };\r\n//     } else if (err) {\r\n//       context.commit(\"setError\", err);\r\n//       return { success: false, error: err };\r\n//     } else {\r\n//       context.commit(\"setError\", \"Unknown error during login\");\r\n//       context.commit(\"setLogStatus\", \"not logged in\");\r\n//       return { success: false, error: \"Unknown error\" };\r\n//     }\r\n//   } catch (err) {\r\n//     console.log(\"Error\")\r\n//   }\r\n// }\r\n// cookieCheck(context) {\r\n//   const token = Cookies.get(\"userToken\");\r\n//   if (token) {\r\n//     context.commit(\"setToken\", token);\r\n//   }\r\n// }\r\n// init(context) {\r\n//   context.dispatch(\"cookieCheck\");\r\n// }\r\n// async logout(context) {\r\n//   context.commit(\"setToken\", null);\r\n//   context.commit(\"setUser\", null);\r\n//   context.commit(\"setUserData\", null);\r\n//   Cookies.remove(\"userToken\");\r\n// },\r\n"],"mappings":"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AI,EAAE,SAAS;YACfC,KAAK,EAAE,kBAAkB;YACzBC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ,CAAC,MAAM;UACLzE,IAAI,CAACsE,IAAI,CAAC;YACRC,IAAI,EAAE,OAAO;YACbC,KAAK,EAAE,OAAO;YACdC,IAAI,EAAE;UACR,CAAC,CAAC;QACJ;MACF,CAAC,CAAC,OAAOZ,KAAK,EAAE;QACd7D,IAAI,CAACsE,IAAI,CAAC;UACRC,IAAI,EAAE,OAAO;UACbC,KAAK,EAAE,OAAO;UACdC,IAAI,EAAEZ,KAAK,CAACc;QACd,CAAC,CAAC;MACJ;IACF,CAAC;IACDgB,MAAMA,CAAC;MAAEpC;IAAO,CAAC,EAAE;MACjBd,YAAY,CAACN,UAAU,CAAC,WAAW,CAAC;MACpCM,YAAY,CAACN,UAAU,CAAC,UAAU,CAAC;MACnCoB,MAAM,CAAC,WAAW,CAAC;MACnB0B,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;IAC1B;EACF,CAAC;EAEDS,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}