{"ast":null,"code":"import { createCommentVNode as _createCommentVNode } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _createCommentVNode(\" <div>\\r\\n\\r\\n\\r\\n\\r\\n    \\r\\n    <div v-for=\\\"product in filteredProducts\\\" :key=\\\"product.productID\\\">\\r\\n      <img :src=\\\"product.productUrl\\\" alt=\\\"Product Image\\\" class=\\\"product-image\\\" />\\r\\n        <h3>{{ product.productNAME }}</h3>\\r\\n  <p> R {{ product.productPRICE }}</p>\\r\\n  <p>{{ product.productCAT }}</p>\\r\\n  <p>{{ product.productTYPE}}</p>\\r\\n\\r\\n  <p>Quantity: {{ product.quantity }}</p>\\r\\n    </div>\\r\\n    \\r\\n\\r\\n    <div v-if=\\\"products\\\" class=\\\"flex-container row row-cols-3\\\">\\r\\n        <CardComp :products=\\\"products\\\" />\\r\\n    </div>\\r\\n\\r\\n  </div> \");\n}","map":{"version":3,"names":["_createCommentVNode"],"sources":["C:\\Users\\Student\\CapstoneB\\capstonefinal\\frontend\\src\\views\\ProductsView.vue"],"sourcesContent":["<template>\r\n    <!-- <div>\r\n\r\n\r\n\r\n    \r\n    <div v-for=\"product in filteredProducts\" :key=\"product.productID\">\r\n      <img :src=\"product.productUrl\" alt=\"Product Image\" class=\"product-image\" />\r\n        <h3>{{ product.productNAME }}</h3>\r\n  <p> R {{ product.productPRICE }}</p>\r\n  <p>{{ product.productCAT }}</p>\r\n  <p>{{ product.productTYPE}}</p>\r\n\r\n  <p>Quantity: {{ product.quantity }}</p>\r\n    </div>\r\n    \r\n\r\n    <div v-if=\"products\" class=\"flex-container row row-cols-3\">\r\n        <CardComp :products=\"products\" />\r\n    </div>\r\n\r\n  </div> -->\r\n\r\n</template>\r\n<script>\r\n\r\nimport LoadingSpinner from '@/components/LoadingSpinner.vue';\r\nimport CardComp from '@/components/CardComp.vue';\r\nexport default {\r\n\r\n    data() {\r\n    return {\r\n      selectedCategory: \"\", // Holds the selected category\r\n      filteredProducts: [], // Holds the filtered products\r\n      categories: [\"Bag\", \"Flag\", \"T-SHIRT\",],\r\n      searchQuery: \"\",\r\n      sortOrder: \"asc\",\r\n      isLoading: true,\r\n    };\r\n  },\r\n\r\n    computed: {\r\n        products() {\r\n            return this.$store.state.products\r\n            \r\n        }\r\n    },\r\n    methods: {\r\n\r\n    filter() {\r\n      this.filteredProducts = this.products.filter(product => {\r\n        return this.selectedCategory === \"\" || product.category === this.selectedCategory;\r\n      });\r\n    },\r\n\r\n    performSearch() {\r\n    this.filteredProducts = this.products.filter(product => {\r\n      const productName = product.prodName.toLowerCase();\r\n      return productName.includes(this.searchQuery.toLowerCase());\r\n    });\r\n  },\r\n  sortProducts() {\r\n    this.products.sort((a, b) => {\r\n      if (this.sortOrder === \"asc\") {\r\n        return a.amount - b.amount;\r\n      } else {\r\n        return b.amount - a.amount;\r\n      }\r\n    });\r\n\r\n    // If products are currently being filtered, update the filteredProducts array\r\n    if (this.selectedCategory || this.searchQuery) {\r\n      this.filter();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  },\r\n\r\n  mounted() {\r\n    this.$store.dispatch(\"getProducts\").then(() => {\r\n      this.products = this.$store.state.products;\r\n    });\r\n  },\r\n    components: {CardComp,  LoadingSpinner},\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>"],"mappings":";;SACIA,mBAAA,ykBAoBQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}