{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createStaticVNode as _createStaticVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createStaticVNode(\"<div class=\\\"card\\\"><div class=\\\"card-body\\\"><h5 class=\\\"card-title\\\">Card title</h5><p class=\\\"card-text\\\"> Some quick example text to build on the card title and make up the bulk of the card&#39;s content. </p><a href=\\\"#!\\\" class=\\\"btn btn-primary\\\">Button</a></div></div>\", 1);\nconst _hoisted_2 = {\n  key: 0,\n  class: \"flex-container row row-cols-3\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_CardComp = _resolveComponent(\"CardComp\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createCommentVNode(\" Display filtered products \"), (_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.filteredProducts, product => {\n    return _openBlock(), _createElementBlock(\"div\", {\n      key: product.productID\n    }, [_createCommentVNode(\" Your product details \"), _createCommentVNode(\" ... \")]);\n  }), 128 /* KEYED_FRAGMENT */)), _createCommentVNode(\" Card component with your existing code \"), _hoisted_1, $options.products ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [_createVNode(_component_CardComp, {\n    products: $options.products\n  }, null, 8 /* PROPS */, [\"products\"])])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" <loading-spinner v-else/> \")]);\n}","map":{"version":3,"names":["class","_createElementBlock","_createCommentVNode","_Fragment","_renderList","$data","filteredProducts","product","key","productID","_hoisted_1","$options","products","_hoisted_2","_createVNode","_component_CardComp"],"sources":["C:\\Users\\Student\\CapstoneB\\capstonefinal\\frontend\\src\\views\\ProductsView.vue"],"sourcesContent":["\r\n<template>\r\n  <div>\r\n    <!-- Display filtered products -->\r\n    <div v-for=\"product in filteredProducts\" :key=\"product.productID\">\r\n      <!-- Your product details -->\r\n      <!-- ... -->\r\n    </div>\r\n\r\n    <!-- Card component with your existing code -->\r\n    <div class=\"card\">\r\n      \r\n      <div class=\"card-body\">\r\n        <h5 class=\"card-title\">Card title</h5>\r\n        <p class=\"card-text\">\r\n          Some quick example text to build on the card title and make up the\r\n          bulk of the card's content.\r\n        </p>\r\n        <a href=\"#!\" class=\"btn btn-primary\">Button</a>\r\n      </div>\r\n    </div>\r\n\r\n    <div v-if=\"products\" class=\"flex-container row row-cols-3\">\r\n      <CardComp :products=\"products\" />\r\n    </div>\r\n    <!-- <loading-spinner v-else/> -->\r\n  </div>\r\n</template>\r\n\r\n    <!-- <div>\r\n\r\n\r\n\r\n    \r\n    <div v-for=\"product in filteredProducts\" :key=\"product.productID\">\r\n      <img :src=\"product.productUrl\" alt=\"Product Image\" class=\"product-image\" />\r\n        <h3>{{ product.productNAME }}</h3>\r\n  <p> R {{ product.productPRICE }}</p>\r\n  <p>{{ product.productCAT }}</p>\r\n  <p>{{ product.productTYPE}}</p>\r\n\r\n  <p>Quantity: {{ product.quantity }}</p>\r\n    </div>\r\n    \r\n\r\n    <div v-if=\"products\" class=\"flex-container row row-cols-3\">\r\n        <CardComp :products=\"products\" />\r\n    </div>\r\n\r\n  </div> -->\r\n\r\n\r\n<script>\r\n\r\nimport LoadingSpinner from '@/components/LoadingSpinner.vue';\r\nimport CardComp from '@/components/CardComp.vue';\r\nexport default {\r\n\r\n    data() {\r\n    return {\r\n      selectedCategory: \"\", // Holds the selected category\r\n      filteredProducts: [], // Holds the filtered products\r\n      categories: [\"Bag\", \"Flag\", \"T-SHIRT\",],\r\n      searchQuery: \"\",\r\n      sortOrder: \"asc\",\r\n      isLoading: true,\r\n    };\r\n  },\r\n\r\n    computed: {\r\n        products() {\r\n            return this.$store.state.products\r\n            \r\n        }\r\n    },\r\n    methods: {\r\n\r\n    filter() {\r\n      this.filteredProducts = this.products.filter(product => {\r\n        return this.selectedCategory === \"\" || product.category === this.selectedCategory;\r\n      });\r\n    },\r\n\r\n    performSearch() {\r\n    this.filteredProducts = this.products.filter(product => {\r\n      const productName = product.prodName.toLowerCase();\r\n      return productName.includes(this.searchQuery.toLowerCase());\r\n    });\r\n  },\r\n  sortProducts() {\r\n    this.products.sort((a, b) => {\r\n      if (this.sortOrder === \"asc\") {\r\n        return a.amount - b.amount;\r\n      } else {\r\n        return b.amount - a.amount;\r\n      }\r\n    });\r\n\r\n    // If products are currently being filtered, update the filteredProducts array\r\n    if (this.selectedCategory || this.searchQuery) {\r\n      this.filter();\r\n    }\r\n  }\r\n\r\n\r\n\r\n  },\r\n\r\n  mounted() {\r\n    this.$store.dispatch(\"getProducts\").then(() => {\r\n      this.products = this.$store.state.products;\r\n    });\r\n  },\r\n    components: {CardComp,  LoadingSpinner},\r\n}\r\n</script>\r\n<style>\r\n\r\n</style>"],"mappings":";;;;EAsByBA,KAAK,EAAC;;;;uBApB7BC,mBAAA,CAwBM,cAvBJC,mBAAA,+BAAkC,G,kBAClCD,mBAAA,CAGME,SAAA,QAAAC,WAAA,CAHiBC,KAAA,CAAAC,gBAAgB,EAA3BC,OAAO;yBAAnBN,mBAAA,CAGM;MAHoCO,GAAG,EAAED,OAAO,CAACE;QACrDP,mBAAA,0BAA6B,EAC7BA,mBAAA,SAAY,C;kCAGdA,mBAAA,4CAA+C,EAC/CQ,UAUM,EAEKC,QAAA,CAAAC,QAAQ,I,cAAnBX,mBAAA,CAEM,OAFNY,UAEM,GADJC,YAAA,CAAiCC,mBAAA;IAAtBH,QAAQ,EAAED,QAAA,CAAAC;EAAQ,sC,wCAE/BV,mBAAA,+BAAkC,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}